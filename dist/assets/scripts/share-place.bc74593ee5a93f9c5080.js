(function(){"use strict";var __webpack_modules__={9441:function(){eval("\n;// CONCATENATED MODULE: ./src/UI/Modal.js\n//js file for diaplaying the modal and content in it\nclass Modal {\n  constructor(contentId, fallbackText) {\n    //template Id and fallback text received on instantiation in SharePlace\n    this.fallbackText = fallbackText; //\n    this.contentTemplateEl = document.getElementById(contentId); // access to template element loading-modal-content received from constructor parameter on modal instantiaton in SharePlace\n    this.modalTemplateEl = document.getElementById('modal-template'); // access to template element modal-template \n  }\n\n  show() {\n    // function to show modal\n    if ('content' in document.createElement('template')) {\n      // test to see if browser supports html templates. in keyword checks to see if element template onject has the content property\n      const modalElements = document.importNode(this.modalTemplateEl.content, true); //create a node baded on template. true makes deep copy giving access to nodes decendants\n      this.modalElement = modalElements.querySelector('.modal'); // access to modal element via modalElements\n      this.backdropElement = modalElements.querySelector('.backdrop'); // access to backdrop element via modalElements\n      const contentElement = document.importNode(this.contentTemplateEl.content, true); // access to modal content from crated node that will be displayed be displayed reflecting contentId from constructor\n\n      this.modalElement.appendChild(contentElement); // appends content to modalElement\n\n      document.body.insertAdjacentElement('afterbegin', this.modalElement); //iserts modal element to into DOM\n      document.body.insertAdjacentElement('afterbegin', this.backdropElement); //inserts backdrop element into DOM\n    } else {\n      // fallback code for browsers that don't support the template element object\n      alert(this.fallbackText);\n    }\n  }\n  hide() {\n    // function to hide modal\n    if (this.modalElement) {\n      document.body.removeChild(this.modalElement); // *could use this.modal.Element.remove()\n      document.body.removeChild(this.backdropElement);\n      this.modalElement = null; //tells js properties are cleared and referenced to DOM elements no longer needed\n      this.backdropElement = null; //tells js properties are cleared and referenced to DOM elements no longer needed\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/UI/Map.js\nclass Map {\n  constructor(coords) {\n    // received on instantiation in shareplace selectPlace function \n    // this.coordinates = coords;\n    this.render(coords);\n  }\n  render(coordinates) {\n    // recives coordinates from function call in selectPlace() funtion call in SharePlace class \n    if (!google) {\n      alert('Could not load maps library - please try again later...');\n      return;\n    }\n    const map = new google.maps.Map(document.getElementById('map'), {\n      // constructor() provided by google maps. gets paseed eleemt id to render map to\n      center: coordinates,\n      // object prop. coords recieved from constuctor\n      zoom: 16\n    });\n    new google.maps.Marker({\n      // adds pin to map\n      position: coordinates,\n      map: map // ties Marker to map instantiated above\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/Utility/Location.js\n//created to reach out to google servers for API to translate the user input into coordinates\n\nconst GOOGLE_API_KEY = 'AIzaSyDwMA8t7jIonhwGmdWZBzjdAG68P_p9_PQ';\nasync function getAddressFromCoords(coords) {\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch address. Please try again...'); // Error is a globally available constructor() in JS\n  }\n\n  const data = await response.json();\n  if (data.error_message) {\n    // checks for errors that could occur with google even in the presence a 200 staus code\n    throw new Error(data.error_message); // error_message is a property in the response body\n  }\n\n  const address = data.results[0].formatted_address; // //results is a Maps API array whos first element is an object with a formated address property with a value that renders the adddress in the format desired here\n  return address;\n}\nasync function getCoordsFromAddress(address) {\n  const urlAdress = encodeURI(address); //made available by the browser api. encodes urls so they can be sent to the server.\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${urlAdress}&key=${GOOGLE_API_KEY}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch coordinates. Please try again...'); // Error is a globally available constructor() in JS\n  }\n\n  const data = await response.json();\n  if (data.error_message) {\n    // checks for errors that could occur with google even in the presence a 200 staus code\n    throw new Error(data.error_message); // error_message is a property in the response body\n  }\n\n  const coordinates = data.results[0].geometry.location; //results is a Maps API array whos first element is an object with a geometry property object with a location property\n  return coordinates;\n}\n;// CONCATENATED MODULE: ./src/SharePlace.js\n\n\n\nclass PlaceFinder {\n  constructor() {\n    const addressForm = document.querySelector('form');\n    const locateUserBtn = document.getElementById('locate-btn');\n    this.shareBtn = document.getElementById('share-btn');\n    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this)); // binds button this to Class instead of button\n    this.shareBtn.addEventListener('click', this.sharePlaceHandler);\n    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));\n  }\n  sharePlaceHandler() {\n    const sharedLinkInputElement = document.getElementById('share-link');\n    if (!navigator.clipboard) {\n      sharedLinkInputElement.select(); // marks text in a field or text area\n      return;\n    }\n    navigator.clipboard.writeText(sharedLinkInputElement.value) //writes link to the clipbors. returns a promise\n    .then(() => {\n      alert('Copied into clipbord...');\n    }).catch(err => {\n      console.log(err);\n      sharedLinkInputElement.select(); // marks text in a field or text area\n    });\n  }\n\n  selectPlace(coordinates, address) {\n    //receives coordinates from function call in  modal below\n    if (this.map) {\n      // checks if there is already a map so if we get user loc 2ce in a row a new map object isnt created\n      this.map.render(coordinates); //calls render method in Maps forwarding coordinates\n    } else {\n      // create a new map if one has not already been created\n      this.map = new Map(coordinates); // map instace created. cordiantes received from modal. passes coordinates to Map class\n    }\n\n    this.shareBtn.disabled = false;\n    const sharedLinkInputElement = document.getElementById('share-link');\n    //url constucted below from address lat and lng retrieved from getAddressFromCoords google fetch in Location.js\n    sharedLinkInputElement.value = `${location.origin}/my-place?address=${encodeURI(address)}&lat=${coordinates.lat}&lng=${coordinates.lng}`;\n  }\n  locateUserHandler() {\n    if (!navigator.geolocation) {\n      alert('Location feature not available in your browser - please use a more modern one or manually enter an address.');\n      return;\n    }\n    const modal = new Modal('loading-modal-content', 'Loading Location - please wait...'); // pass id of contnet and fallback text on instantiation\n    modal.show(); // calls show method created in Modal class \n    navigator.geolocation.getCurrentPosition(\n    // gets current location of the user. Takes 2 argu's\n    async successResult => {\n      // code for exe on getting location\n      const coordinates = {\n        lat: successResult.coords.latitude,\n        // can add + Math.random() * 50 to hide location\n        lng: successResult.coords.longitude // can add + Math.random() * 50 to hide location\n      };\n\n      const address = await getAddressFromCoords(coordinates); // calls function in Location.js passes coordinates object\n      modal.hide();\n      this.selectPlace(coordinates, address); // forwards coordinates and address to selectPlace\n    }, error => {\n      // fallback for failing to get location\n      modal.hide();\n      alert('Could not locate you. Please enter an address manually.');\n    });\n  }\n  async findAddressHandler(event) {\n    // used to find out where a entered address is located\n    event.preventDefault(); // prevents HTTP request / submission attempt\n    const address = event.target.querySelector('input').value;\n    if (!address || address.trim().length === 0) {\n      // user input validation\n      alert('Invalid address entered. Please try again!');\n      return;\n    }\n    const modal = new Modal('loading-modal-content', 'Loading Location - please wait...'); //instantiates modal for loadind info display\n    modal.show(); // call to show()\n    try {\n      const coordinates = await getCoordsFromAddress(address); //forwards address input by user to function inported from Location script. returns a promoise\n      this.selectPlace(coordinates, address);\n    } catch (err) {\n      alert(err.message); // built in Error constructor function contains message property which uses the messages you put in for errors as values to display \n    }\n\n    modal.hide();\n  }\n}\nconst placeFinder = new PlaceFinder(); // instantiates object placeFinder as an instance of PlaceFinder class//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9441\n")}},__webpack_exports__={};__webpack_modules__[9441]()})();